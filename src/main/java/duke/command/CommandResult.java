package duke.command;

import duke.task.Task;

import java.util.ArrayList;

/**
 * A class representing the result of executing a command.
 */
public class CommandResult {
    private CommandType commandType;
    private Task[] tasks;
    private int taskListSize;

    /**
     * Class constructor specifying the type of the command.
     * @param commandType type of the command that is executed to produce the result.
     */
    public CommandResult(CommandType commandType) {
        this.commandType = commandType;
    }

    /**
     * Class constructor specifying the type of the command and an array of tasks.
     * @param commandType type of the command that is executed to produce the result.
     * @param tasks an array of tasks generated by executing the command.
     */
    public CommandResult(CommandType commandType, Task... tasks) {
        this.commandType = commandType;
        this.tasks = tasks;
    }

    /**
     * Class constructor specifying the type of the command, the total number of tasks, and an array of tasks.
     * @param commandType type of the command that is executed to produce the result.
     * @param taskListSize the size of the task list that the user has.
     * @param tasks an array of tasks generated by executing the command.
     */
    public CommandResult(CommandType commandType, int taskListSize, Task... tasks) {
        this(commandType, tasks);
        this.taskListSize = taskListSize;
    }

    /**
     * Class constructor specifying the type of the command and an array list of tasks.
     * @param commandType type of the command that is executed to produce the result.
     * @param tasks an array list of tasks generated by executing the command.
     */
    public CommandResult(CommandType commandType, ArrayList<Task> tasks) {
        this(commandType, tasks.toArray(new Task[tasks.size()]));
    }

    /**
     * Class constructor specifying the type of the command, the total number of tasks, and an array list of tasks.
     * @param commandType type of the command that is executed to produce the result.
     * @param taskListSize the size of the task list that the user has.
     * @param tasks an array list of tasks generated by executing the command.
     */
    public CommandResult(CommandType commandType, int taskListSize, ArrayList<Task> tasks) {
        this(commandType, taskListSize, tasks.toArray(new Task[tasks.size()]));
    }

    /**
     * Returns the type of command that this result is produced by.
     * @return the type of command that this result is produced by.
     */
    public CommandType getCommandType() {
        return commandType;
    }

    /**
     * Returns an array of tasks that are produced by executing the command.
     * @return an array of tasks that are produced by executing the command.
     */
    public Task[] getTasks() {
        return tasks;
    }

    /**
     * Returns the size of the task list.
     * @return the size of the task list.
     */
    public int getTaskListSize() {
        return taskListSize;
    }
}
